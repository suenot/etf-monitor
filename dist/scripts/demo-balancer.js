// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ —Å –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
import { BALANCER_CONFIG } from '../config/balancer-config.js';
// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ñ–æ–Ω–¥–∞—Ö –¢–∏–Ω—å–∫–æ—Ñ—Ñ
const MOCK_ETF_DATA = {
    'TMOS': {
        name: '–¢–∏–Ω—å–∫–æ—Ñ—Ñ iMOEX',
        price: 1850.5,
        numShares: 50000000,
        marketCap: 92525000000 // 92.5 –º–ª—Ä–¥
    },
    'TRUR': {
        name: '–¢–∏–Ω—å–∫–æ—Ñ—Ñ –í–µ—á–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å',
        price: 1420.3,
        numShares: 35000000,
        marketCap: 49710500000 // 49.7 –º–ª—Ä–¥
    },
    'TBRU': {
        name: '–¢–∏–Ω—å–∫–æ—Ñ—Ñ Bonds',
        price: 980.7,
        numShares: 25000000,
        marketCap: 24517500000 // 24.5 –º–ª—Ä–¥
    },
    'TSPV': {
        name: '–¢–∏–Ω—å–∫–æ—Ñ—Ñ S&P 500',
        price: 2150.8,
        numShares: 15000000,
        marketCap: 32262000000 // 32.3 –º–ª—Ä–¥
    },
    'TEUS': {
        name: '–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ï–≤—Ä–æ–ø–∞',
        price: 1680.2,
        numShares: 8000000,
        marketCap: 13441600000 // 13.4 –º–ª—Ä–¥
    },
    'TEMS': {
        name: '–¢–∏–Ω—å–∫–æ—Ñ—Ñ Emerging Markets',
        price: 1320.5,
        numShares: 6000000,
        marketCap: 7923000000 // 7.9 –º–ª—Ä–¥
    },
    'TGLD': {
        name: '–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ó–æ–ª–æ—Ç–æ',
        price: 2850.1,
        numShares: 3000000,
        marketCap: 8550300000 // 8.6 –º–ª—Ä–¥
    }
};
// –ú–æ–∫–æ–≤—ã–π —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
const MOCK_CURRENT_PORTFOLIO = {
    totalValue: 1000000, // 1 –º–ª–Ω —Ä—É–±–ª–µ–π
    positions: [
        { ticker: 'TMOS', value: 400000, percentage: 40.0 },
        { ticker: 'TRUR', value: 300000, percentage: 30.0 },
        { ticker: 'TBRU', value: 150000, percentage: 15.0 },
        { ticker: 'TSPV', value: 100000, percentage: 10.0 },
        { ticker: 'RUB', value: 50000, percentage: 5.0 }
    ]
};
// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º (UTC)
const MOCK_VOLATILITY_DATA = [
    0.015, 0.012, 0.008, 0.006, 0.005, 0.007, 0.010, 0.018, // 0-7
    0.025, 0.035, 0.028, 0.022, 0.018, 0.015, 0.012, 0.010, // 8-15
    0.008, 0.006, 0.009, 0.012, 0.015, 0.018, 0.020, 0.017 // 16-23
];
class DemoBalancer {
    etfData = {};
    currentPortfolio = {};
    volatilityData = {};
    constructor() {
        this.etfData = MOCK_ETF_DATA;
        this.currentPortfolio = MOCK_CURRENT_PORTFOLIO;
        this.volatilityData = MOCK_VOLATILITY_DATA;
    }
    // –†–∞—Å—á–µ—Ç –∂–µ–ª–∞–µ–º–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ market cap
    calculateDesiredPortfolio() {
        console.log('üìä –†–∞—Å—á–µ—Ç –∂–µ–ª–∞–µ–º–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ market cap...\n');
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π market cap
        let totalMarketCap = 0;
        for (const [ticker, data] of Object.entries(this.etfData)) {
            totalMarketCap += data.marketCap;
            console.log(`${ticker} (${data.name}): ${(data.marketCap / 1000000000).toFixed(1)} –º–ª—Ä–¥ RUB`);
        }
        console.log(`\n–û–±—â–∏–π market cap: ${(totalMarketCap / 1000000000).toFixed(1)} –º–ª—Ä–¥ RUB\n`);
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        const desiredPortfolio = {};
        console.log('–ñ–µ–ª–∞–µ–º—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è:');
        for (const [ticker, data] of Object.entries(this.etfData)) {
            const proportion = (data.marketCap / totalMarketCap) * 95; // 95% –≤ —Ñ–æ–Ω–¥—ã, 5% –≤ —Ä—É–±–ª–∏
            desiredPortfolio[ticker] = proportion;
            console.log(`${ticker}: ${proportion.toFixed(2)}%`);
        }
        desiredPortfolio['RUB'] = 5.0; // 5% –≤ —Ä—É–±–ª—è—Ö –¥–ª—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        console.log(`RUB: 5.00% (–¥–ª—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏)\n`);
        return { portfolio: desiredPortfolio, totalMarketCap };
    }
    // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
    analyzeMarketTiming() {
        console.log('‚è∞ –ê–Ω–∞–ª–∏–∑ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏...\n');
        const currentHour = new Date().getUTCHours();
        let quietestHour = 0;
        let minVolatility = Math.min(...this.volatilityData);
        for (let hour = 0; hour < 24; hour++) {
            if (this.volatilityData[hour] === minVolatility) {
                quietestHour = hour;
                break;
            }
        }
        console.log('–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º (UTC):');
        for (let hour = 0; hour < 24; hour++) {
            const vol = this.volatilityData[hour];
            const marker = hour === quietestHour ? ' ‚Üê –°–ê–ú–û–ï –°–ü–û–ö–û–ô–ù–û–ï' :
                hour === currentHour ? ' ‚Üê –°–ï–ô–ß–ê–°' : '';
            console.log(`${hour.toString().padStart(2, '0')}:00 - ${vol.toFixed(4)}${marker}`);
        }
        console.log(`\n–°–∞–º–æ–µ —Å–ø–æ–∫–æ–π–Ω–æ–µ –≤—Ä–µ–º—è: ${quietestHour}:00 UTC (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${minVolatility.toFixed(4)})`);
        console.log(`–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${currentHour}:00 UTC (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${this.volatilityData[currentHour].toFixed(4)})`);
        const isGoodTime = Math.abs(currentHour - quietestHour) <= 1;
        console.log(`–ü–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: ${isGoodTime ? '–î–ê' : '–ù–ï–¢'}\n`);
        return { quietestHour, currentHour, isGoodTime, minVolatility };
    }
    // –†–∞—Å—á–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
    calculateRebalanceOperations(currentPortfolio, desiredPortfolio) {
        console.log('üîÑ –†–∞—Å—á–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏...\n');
        const operations = [];
        const totalValue = currentPortfolio.totalValue;
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
        const currentPositions = new Map();
        for (const position of currentPortfolio.positions) {
            currentPositions.set(position.ticker, position);
        }
        console.log('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏ –∂–µ–ª–∞–µ–º–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è:');
        console.log('–¢–∏–∫–µ—Ä'.padEnd(8) + '–¢–µ–∫—É—â–∏–π'.padEnd(12) + '–ñ–µ–ª–∞–µ–º—ã–π'.padEnd(12) + '–†–∞–∑–Ω–∏—Ü–∞'.padEnd(12) + '–î–µ–π—Å—Ç–≤–∏–µ');
        console.log('-'.repeat(60));
        for (const [ticker, desiredPercent] of Object.entries(desiredPortfolio.portfolio)) {
            const currentPosition = currentPositions.get(ticker);
            const currentPercent = currentPosition ? currentPosition.percentage : 0;
            const percentDiff = desiredPercent - currentPercent;
            let action = '–ù–ï–¢';
            if (Math.abs(percentDiff) > 2) { // –ü–æ—Ä–æ–≥ 2%
                const targetValue = (desiredPercent / 100) * totalValue;
                const currentValue = currentPosition ? currentPosition.value : 0;
                const valueDiff = targetValue - currentValue;
                if (Math.abs(valueDiff) > 10000) { // –ú–∏–Ω–∏–º—É–º 10k —Ä—É–±–ª–µ–π
                    action = valueDiff > 0 ? `–ö–£–ü–ò–¢–¨ ${Math.abs(valueDiff).toFixed(0)} RUB` : `–ü–†–û–î–ê–¢–¨ ${Math.abs(valueDiff).toFixed(0)} RUB`;
                    operations.push({
                        ticker,
                        action: valueDiff > 0 ? 'BUY' : 'SELL',
                        currentPercent,
                        desiredPercent,
                        percentDiff,
                        valueDiff: Math.abs(valueDiff),
                        priority: Math.abs(percentDiff)
                    });
                }
            }
            console.log(ticker.padEnd(8) +
                `${currentPercent.toFixed(1)}%`.padEnd(12) +
                `${desiredPercent.toFixed(1)}%`.padEnd(12) +
                `${percentDiff > 0 ? '+' : ''}${percentDiff.toFixed(1)}%`.padEnd(12) +
                action);
        }
        console.log(`\n–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${operations.length}\n`);
        return operations;
    }
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
    async demonstrateBalancing() {
        console.log('ü§ñ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ë–û–¢–ê-–ë–ê–õ–ê–ù–°–ò–†–û–í–©–ò–ö–ê –¢–ò–ù–¨–ö–û–§–§ ===\n');
        console.log(`–†–µ–∂–∏–º: ${BALANCER_CONFIG.SAFETY.DRY_RUN ? '–¢–ï–°–¢–û–í–´–ô (DRY RUN)' : '–ë–û–ï–í–û–ô'}`);
        console.log(`–§–æ–Ω–¥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ${Object.keys(this.etfData).length}`);
        console.log(`–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${(this.currentPortfolio.totalValue / 1000000).toFixed(1)} –º–ª–Ω RUB\n`);
        // 1. –†–∞—Å—á–µ—Ç –∂–µ–ª–∞–µ–º–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        const desired = this.calculateDesiredPortfolio();
        // 2. –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        const timing = this.analyzeMarketTiming();
        // 3. –†–∞—Å—á–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π
        const operations = this.calculateRebalanceOperations(this.currentPortfolio, desired);
        // 4. –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if (operations.length > 0) {
            console.log('üíº –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏:');
            if (!timing.isGoodTime) {
                console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏...');
                console.log(`–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –≤ ${timing.quietestHour}:00 UTC\n`);
            }
            else {
                console.log('‚úÖ –í—Ä–µ–º—è –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏\n');
            }
            for (const [index, operation] of operations.entries()) {
                console.log(`${index + 1}. ${operation.action} ${operation.ticker}: ${operation.valueDiff.toFixed(0)} RUB`);
                console.log(`   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${operation.currentPercent.toFixed(1)}% ‚Üí ${operation.desiredPercent.toFixed(1)}%`);
                if (BALANCER_CONFIG.SAFETY.DRY_RUN) {
                    console.log('   [DRY RUN] –û–ø–µ—Ä–∞—Ü–∏—è —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∞ ‚úì');
                }
                else {
                    console.log('   [–†–ï–ê–õ–¨–ù–ê–Ø –¢–û–†–ì–û–í–õ–Ø] –û—Ä–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úì');
                }
                // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
                await new Promise(resolve => setTimeout(resolve, 100));
            }
        }
        else {
            console.log('‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å —É–∂–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω, –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è');
        }
        console.log('\nüéØ === –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===');
        console.log('\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:');
        console.log('‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞ —Ä—ã–Ω–∫–æ–º');
        console.log('‚Ä¢ –ü–æ–∫—É–ø–∫–∞ —Ä–∞—Å—Ç—É—â–∏—Ö —Ñ–æ–Ω–¥–æ–≤, –ø—Ä–æ–¥–∞–∂–∞ –ø–∞–¥–∞—é—â–∏—Ö');
        console.log('‚Ä¢ –¢–æ—Ä–≥–æ–≤–ª—è –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è');
        console.log('‚Ä¢ –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–º–∏—Å—Å–∏–π –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–π');
        console.log('‚Ä¢ –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –≤—Å–µ–º —Ñ–æ–Ω–¥–∞–º –¢–∏–Ω—å–∫–æ—Ñ—Ñ');
        return {
            success: true,
            operations: operations.length,
            timing: timing.isGoodTime ? 'optimal' : 'waiting',
            portfolioValue: this.currentPortfolio.totalValue
        };
    }
}
// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
async function runDemo() {
    const demo = new DemoBalancer();
    await demo.demonstrateBalancing();
}
// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
    runDemo().catch(console.error);
}
export { DemoBalancer, runDemo };
