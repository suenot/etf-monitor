// analytics-report.js - –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
import 'dotenv/config';
import { analytics } from '../utils/analytics.js';
import { db } from '../database/client.js';

async function generateFullReport() {
    console.log('=== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ ===\n');
    
    try {
        // 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        console.log('üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´');
        console.log('=' .repeat(50));
        
        const systemStats = await analytics.getSystemStats();
        if (systemStats) {
            console.log(`ETF –¥–∞–Ω–Ω—ã–µ:`);
            console.log(`  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ETF: ${systemStats.etf.unique_etfs}`);
            console.log(`  –í—Å–µ–≥–æ —Å–Ω–∏–º–∫–æ–≤: ${systemStats.etf.total_snapshots}`);
            console.log(`  –ü–µ—Ä–∏–æ–¥: ${systemStats.etf.first_snapshot} - ${systemStats.etf.last_snapshot}`);
            
            console.log(`\n–î–∞–Ω–Ω—ã–µ –æ–± –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞—Ö:`);
            console.log(`  ETF —Å –¥–∞–Ω–Ω—ã–º–∏: ${systemStats.investors.unique_etfs}`);
            console.log(`  –í—Å–µ–≥–æ —Å–Ω–∏–º–∫–æ–≤: ${systemStats.investors.total_snapshots}`);
            console.log(`  –ü–µ—Ä–∏–æ–¥: ${systemStats.investors.first_snapshot} - ${systemStats.investors.last_snapshot}`);
        }

        // 2. –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ ETF
        console.log('\n\nüìà –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ETF');
        console.log('=' .repeat(50));
        
        const summary = await analytics.getEtfSummary();
        if (summary) {
            console.log(`–í—Å–µ–≥–æ ETF —Ñ–æ–Ω–¥–æ–≤: ${summary.total_etfs}`);
            console.log(`ETF —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞—Ö: ${summary.etfs_with_investors}`);
            console.log(`–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤: ${Number(summary.total_investors).toLocaleString()}`);
            console.log(`–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –Ω–∞ ETF: ${Math.round(summary.avg_investors_per_etf)}`);
            console.log(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤: ${summary.min_investors}`);
            console.log(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤: ${summary.max_investors}`);
        }

        // 3. –¢–æ–ø ETF –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
        console.log('\n\nüèÜ –¢–û–ü-15 ETF –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –ò–ù–í–ï–°–¢–û–†–û–í');
        console.log('=' .repeat(50));
        
        const topEtfs = await analytics.getTopEtfsByInvestors(15);
        if (topEtfs.length > 0) {
            topEtfs.forEach((etf, index) => {
                const name = etf.name || '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
                const ticker = etf.ticker || etf.figi;
                console.log(`${(index + 1).toString().padStart(2)}. ${ticker.padEnd(8)} | ${etf.investors.toLocaleString().padStart(8)} –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ | ${name}`);
            });
        }

        // 4. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–∞–ª—é—Ç–∞–º
        console.log('\n\nüí± –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï ETF –ü–û –í–ê–õ–Æ–¢–ê–ú');
        console.log('=' .repeat(50));
        
        const currencies = await analytics.getCurrencyDistribution();
        if (currencies.length > 0) {
            currencies.forEach(curr => {
                console.log(`${curr.currency.padEnd(5)} | ${curr.count.toString().padStart(3)} ETF (${curr.percentage}%)`);
            });
        }

        // 5. –ë—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏–µ ETF –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        console.log('\n\nüöÄ –ë–´–°–¢–†–û–†–ê–°–¢–£–©–ò–ï ETF (7 –î–ù–ï–ô)');
        console.log('=' .repeat(50));
        
        const growingEtfs = await analytics.getFastestGrowingEtfs(7, 10);
        if (growingEtfs.length > 0) {
            console.log('–¢–∏–∫–µ—Ä    | –†–æ—Å—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ | –†–æ—Å—Ç %  | –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ');
            console.log('-'.repeat(65));
            growingEtfs.forEach(etf => {
                const ticker = (etf.ticker || etf.figi).padEnd(8);
                const growth = `+${etf.absolute_growth}`.padStart(8);
                const percentage = `+${etf.percentage_growth}%`.padStart(8);
                const current = etf.latest_investors.toLocaleString().padStart(8);
                console.log(`${ticker} | ${growth}       | ${percentage} | ${current}`);
            });
        } else {
            console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ—Å—Ç–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π');
        }

        // 6. –ë—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏–µ ETF –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
        console.log('\n\nüìÖ –ë–´–°–¢–†–û–†–ê–°–¢–£–©–ò–ï ETF (30 –î–ù–ï–ô)');
        console.log('=' .repeat(50));
        
        const monthlyGrowth = await analytics.getFastestGrowingEtfs(30, 10);
        if (monthlyGrowth.length > 0) {
            console.log('–¢–∏–∫–µ—Ä    | –†–æ—Å—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ | –†–æ—Å—Ç %  | –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ');
            console.log('-'.repeat(65));
            monthlyGrowth.forEach(etf => {
                const ticker = (etf.ticker || etf.figi).padEnd(8);
                const growth = `+${etf.absolute_growth}`.padStart(8);
                const percentage = `+${etf.percentage_growth}%`.padStart(8);
                const current = etf.latest_investors.toLocaleString().padStart(8);
                console.log(`${ticker} | ${growth}       | ${percentage} | ${current}`);
            });
        } else {
            console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ—Å—Ç–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π');
        }

        console.log('\n=== –û—Ç—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω ===');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:', error);
    } finally {
        await db.disconnect();
    }
}

async function generateEtfReport(figi) {
    console.log(`=== –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ ETF: ${figi} ===\n`);
    
    try {
        const report = await analytics.getEtfDetailedReport(figi);
        
        if (!report) {
            console.log(`ETF —Å FIGI ${figi} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
            return;
        }

        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log('üìã –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø');
        console.log('=' .repeat(40));
        console.log(`FIGI: ${report.figi}`);
        console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${report.etfData.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        console.log(`–¢–∏–∫–µ—Ä: ${report.etfData.ticker || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`–í–∞–ª—é—Ç–∞: ${report.etfData.currency || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
        console.log(`ISIN: ${report.etfData.isin || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞–º
        if (report.investorsStats.total_snapshots > 0) {
            console.log('\nüë• –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ù–í–ï–°–¢–û–†–û–í');
            console.log('=' .repeat(40));
            console.log(`–í—Å–µ–≥–æ —Å–Ω–∏–º–∫–æ–≤: ${report.investorsStats.total_snapshots}`);
            console.log(`–ú–∏–Ω–∏–º—É–º –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤: ${report.investorsStats.min_investors}`);
            console.log(`–ú–∞–∫—Å–∏–º—É–º –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤: ${report.investorsStats.max_investors}`);
            console.log(`–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${Math.round(report.investorsStats.avg_investors)}`);
            console.log(`–ü–µ—Ä–∏–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: ${report.investorsStats.first_snapshot} - ${report.investorsStats.last_snapshot}`);

            // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–Ω–∏–º–∫–∏
            if (report.recentInvestors.length > 0) {
                console.log('\nüìä –ü–û–°–õ–ï–î–ù–ò–ï –°–ù–ò–ú–ö–ò');
                console.log('=' .repeat(40));
                report.recentInvestors.forEach((snapshot, index) => {
                    const date = new Date(snapshot.captured_at).toLocaleString('ru-RU');
                    console.log(`${index + 1}. ${date}: ${snapshot.investors.toLocaleString()} –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤`);
                });
            }

            // –î–∏–Ω–∞–º–∏–∫–∞ —Ä–æ—Å—Ç–∞
            const growth = await analytics.getInvestorsGrowth(figi, 30);
            if (growth.length > 1) {
                console.log('\nüìà –î–ò–ù–ê–ú–ò–ö–ê –†–û–°–¢–ê (30 –î–ù–ï–ô)');
                console.log('=' .repeat(40));
                growth.slice(0, 10).forEach(item => {
                    if (item.growth !== null) {
                        const date = new Date(item.captured_at).toLocaleDateString('ru-RU');
                        const growthStr = item.growth > 0 ? `+${item.growth}` : item.growth.toString();
                        console.log(`${date}: ${item.investors.toLocaleString()} (${growthStr})`);
                    }
                });
            }
        } else {
            console.log('\nüë• –î–ê–ù–ù–´–ï –û–ë –ò–ù–í–ï–°–¢–û–†–ê–•');
            console.log('=' .repeat(40));
            console.log('–î–∞–Ω–Ω—ã–µ –æ–± –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        }

        console.log('\n=== –û—Ç—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω ===');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ ETF:', error);
    } finally {
        await db.disconnect();
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
    const command = process.argv[2];
    const figi = process.argv[3];
    
    if (command === 'etf' && figi) {
        await generateEtfReport(figi);
    } else if (command === 'full') {
        await generateFullReport();
    } else {
        console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
        console.log('  node src/scripts/analytics-report.js full          - –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç');
        console.log('  node src/scripts/analytics-report.js etf <FIGI>    - –æ—Ç—á–µ—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É ETF');
        console.log('');
        console.log('–ü—Ä–∏–º–µ—Ä—ã:');
        console.log('  node src/scripts/analytics-report.js full');
        console.log('  node src/scripts/analytics-report.js etf BBG004730N88');
    }
}

export { generateFullReport, generateEtfReport };
